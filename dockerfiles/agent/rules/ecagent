#!/bin/sh
#
# ecagent
#
# Copyright (c) 2002-2018 Electric Cloud, Inc.
# All rights reserved
#
#
# This file is the Unix init.d startup script for the Electric Cloud agent.
# It is meant to be installed into /etc/init.d, and linked to that location
# from /etc/rc2.d/S77ecagent, so that the agent will be started automatically
# when the machine boots up.
#
# Per standard init.d script syntax, this script responds to three command-line
# options:
#
#       ecagent start
#               Start the agent process.
#
#       ecagent stop
#               Terminate the agent process, provided it was started by
#               this script (otherwise ecagent does not know which PID to
#               kill).
#
#       ecagent restart
#               Stop the agent, then start the agent.
#

# Set the process umask and PATH to known safe values.

mkdir -p "/opt/ecloud/i686_Linux/tmp"
mkdir -p "/opt/ecloud/i686_Linux/logs"
cd /var/run
ulimit -c unlimited
umask 022
PATH=/usr/bin:/bin

SYSTEM=`/bin/uname -s`
SYSARCH=`/bin/uname -m`

EC_ARCH=i686_Linux
MACH=`/bin/uname -m`
BINDIR=64/bin

INSTDIR=/opt/ecloud
if [ ! -d "$INSTDIR" ]; then
    INSTDIR=/opt/ecloud
    if [ ! -d "$INSTDIR" ]; then
       echo "ERROR: Unable to locate install dir"
       exit 1
    fi
fi

# Find awk
AWK_CMD=awk
if [ -x /usr/bin/awk ]; then
    AWK_CMD=/usr/bin/awk
else
    if [ -x /bin/awk ]; then
        AWK_CMD=/bin/awk
    fi
fi

# Find sort
SORT_CMD=sort
if [ -x /usr/bin/sort ]; then
    SORT_CMD=/usr/bin/sort
else
    if [ -x /bin/sort ]; then
        SORT_CMD=/bin/sort
    fi
fi

# Set up shorthand references for important locations.

ECDIR=$INSTDIR/$EC_ARCH/bin             ;# The Electric Cloud bin directory.
AGENT=$INSTDIR/$EC_ARCH/$BINDIR/ecagent ;# Path to the agent binary.
RUNAGENT=$INSTDIR/$EC_ARCH/$BINDIR/runagent                ;# Path to the runagent script.
CMHOST=nova-cm                          ;# Name of the host running the cluster
                                         # manager.
CMPORT=80                               ;# Port on which the cluster manager is
                                         # running.
SECURE_CONSOLE=n                        ;# Whether or not the agent console 
                                         # port requires a key for access.
DISKCACHE=$INSTDIR/$EC_ARCH/$BINDIR/diskcache
                                         # Path to the diskcache manager 
                                         # binary.
RUNDISKCACHE=$INSTDIR/$EC_ARCH/$BINDIR/rundiskcache        ;# Path to the rundiskcache script.
DISKCACHE_PORTFILE=/var/run/diskcache.port
                                         # The location where the diskcache 
                                         # manager wrote its port information
                                         # for the agent to read.
TEMPDIR=/tmp                            ;# Location the agent should use to
                                         # store temporary files.  

# Set to 1 if this is a local agent.
LOCALAGENT=0

# Set to y to prevent the building of LOFS
SKIP_LOFS=1
SKIP_EFS=1
# Emake-to-agent security mode.
EMAKESECURITY=

# Agent log flags.
TRACE=

if [ -f /etc/sysconfig/ecagent.conf ]; then
        echo  "<--Log--$0> | Reading from ecagent.conf"
        . /etc/sysconfig/ecagent.conf   ;# Load an optional configuration
                                         # file. This is for Linux.
else
    if [ -f $INSTDIR/$EC_ARCH/conf/ecagent.conf ]; then
            . $INSTDIR/$EC_ARCH/conf/ecagent.conf ;# Load an optional configuration
                                                # file. This is for Solaris.
    fi  
fi

#------------------------------------------------------------------------
# checkProcess
#
#       Checks whether any instances of the named processes are running.
#       Returns 0 if so, 1 if none are running.
#------------------------------------------------------------------------
checkProcess() {
        while [ "$1" ]; do
           if /usr/bin/pgrep -f $1 > /dev/null ; then 
               return 0
           fi
           shift
        done
        return 1
}

#------------------------------------------------------------------------
# startAgent
#
#       Use the runagent script to start the agent process.  This function
#       uses the value of the variables CMHOST and CMPORT when invoking
#       runagent.
#------------------------------------------------------------------------

startAgent() {
    DISKCACHE_LOGFILE=/var/log/diskcache.log

    # Set AGENT_NUMBER (if it is empty) in container to 1 
    AGENT_NUMBER=${AGENT_NUMBER:=1}

    # Start up the correct number of agents based on the value specified in
    # the configuration file.
    if [ -z "$AGENT_NUMBER" ] ; then
        echo "AGENT_NUMBER is not set. I don't know how many agents to start."
        exit 1
    fi

    if /usr/bin/pgrep -f $AGENT -P 1 > /dev/null ; then
        echo "<--Log--$0> | Agents already running"
        exit 1
    fi

    if [ -n "$MAX_OPEN_FDS" ] ; then
        ulimit -n $MAX_OPEN_FDS
        echo "Max open fds set to $MAX_OPEN_FDS"
    fi

    # Fix the updatedb
    $INSTDIR/$EC_ARCH/$BINDIR/ecfixupdatedb

    # Start the diskcache manager
    echo  "<--Log--$0> | Going to run $DISKCACHE"
    $DISKCACHE $RUNDISKCACHE -logfile $DISKCACHE_LOGFILE -numagents $AGENT_NUMBER -tempdir "$TEMPDIR"
    echo  "<--Log--$0> | Started $DISKCACHE $RUNDISKCACHE -logfile $DISKCACHE_LOGFILE -numagents $AGENT_NUMBER -tempdir $TEMPDIR"
    /bin/sleep 2
    
    # If EFS_ID is empty set it as "0"
    EFS_ID=${EFS_ID:=0}
    
    # Calculate count of cpu
    if  [ -f /usr/bin/nproc ]; then 
            CNTCPU=`/usr/bin/nproc --all`
    elif [ -z $CNTCPU ] && [ -f /usr/bin/getconf ] ; then
            CNTCPU=`/usr/bin/getconf _NPROCESSORS_ONLN`
    elif [ -z $CNTCPU ]; then
            CNTCPU=`cat /proc/cpuinfo \
                | /bin/grep processor \
                | /usr/bin/wc -l`
    fi

    # EFS_ID should be in range [0..CNT_CPU-1]
    if [ $EFS_ID -ge $CNTCPU  ]; then
            echo  "<--Log--$0> | ERROR: EFS_ID must be less than CPU number of docker host. CPU=$CNTCPU, EFS_ID=$EFS_ID."
            exit 3     
    fi
    
    $AGENT $RUNAGENT -daemon yes -cm $CMHOST:$CMPORT -efsid $EFS_ID -numagents $AGENT_NUMBER -secureconsole $SECURE_CONSOLE -diskcacheportfile $DISKCACHE_PORTFILE -tempdir "$TEMPDIR" -local 1 -emakesecurity "$EMAKESECURITY" -trace "$TRACE"
    if [ -d /var/lock/subsys ]; then
        /bin/touch /var/lock/subsys/ecagent
    fi
}

#----------------------------------------------------------------------------
# killProcess
#
#       Shutdown a process gracefully (via SIGTERM) if possible, falling back
#       to SIGKILL is the process fails to exit in a reasonable amount of
#       time.  This function tries to be tolerant of systems that are running
#       multiple instances of the process to be killed -- as long as some
#       progress is made towards shutting down (ie, at least one instance of
#       the process has exited), we will continue to wait.  Only when we hit
#       a point where no instances have exited for some period of time will
#       we resort to SIGKILL.
#----------------------------------------------------------------------------

killProcess() {
    count=`/usr/bin/pgrep -f $1 -P 1 | /usr/bin/wc -l`
    if [ $count -eq 0 ] ; then
        return
    fi

    # Check how many instances are running.

    count=`/usr/bin/pgrep -f $1 -P 1 | /usr/bin/wc -l`
    watchdog=0
    phase=0

    while [ $count -gt 0 ] ; do
        # There is at least one instance still running.  Send a TERM signal to
        # the process, sleep for one second, then check the count again.  This
        # setup means that we will send multiple SIGTERM signals to the
        # process, which we've found necessary because of some startup races
        # in the agent -- it's possible that the shutdown attempt occurs
        # between when the agent registers a signal handler and when that
        # handler is actually prepared to handle the signal.

        /usr/bin/pkill -TERM -f -P 1 $1
        if [ $? -ne 0 ] ; then
            echo "pkill -TERM matched nothing ($?)" >> /var/log/ecagent.log
        fi

        if [ "$SYSTEM" = "SunOS" ] ; then
            /usr/bin/pgrep -f $1 -P 1 >> /var/log/ecagent.log
            echo "" >> /var/log/ecagent.log
        fi
        /bin/sleep 1
        current=`/usr/bin/pgrep -f $1 -P 1 | /usr/bin/wc -l`
        if [ $current -ne $count ] ; then
            # At least one instance of the process has exited.  Reset the
            # watchdog timer.
            watchdog=0
        else
            # No instances of the process have exited since the last check.
            # Increment the watchdog timer.  If we have gone several seconds
            # with no progress, log a message and send a SIGKILL to the process
            # to try to force it to exit.

            watchdog=`/usr/bin/expr $watchdog + 1`
            if [ $watchdog -gt 120 ] ; then
                if [ $phase -eq 0 ] ; then
                    # We're in phase zero and 120 seconds have passed with
                    # no sign that the process is exiting.  Send a SIGKILL.

                    echo "`/bin/date` No progress after 120 seconds, sending SIGKILL" >> /var/log/ecagent.log
                    if [ "$SYSTEM" = "SunOS" ] ; then
                        /usr/bin/pstack `/usr/bin/pgrep -f $1 -P 1` >> /var/log/ecagent.log
                    fi
                    /usr/bin/pkill -KILL -f -P 1 $1
                    if [ $? -ne 0 ] ; then
                        echo "pkill -KILL matched nothing ($?)"
                    fi
                    phase=1
                else
                    # Where in phase one, which means that we've already sent
                    # SIGKILL to the process.  All we can do now is complain
                    # about our failure to shutdown the process.

                    echo "Unable to kill $2"
                    echo "`/bin/date` Unable to kill $2" >> /var/log/ecagent.log
                    RETVAL=1
                    break
                fi
            fi
        fi
        count=$current
    done
}

#------------------------------------------------------------------------
# stopAgent
#
#       Attempt to terminate the agent process by sending a SIGTERM to any
#       process that is executing our ecagent executable.  If this fails to 
#       terminate the agent after a reasonable amount of time, it will try 
#       again with a SIGKILL.
#------------------------------------------------------------------------

stopAgent() {
    if [ -f /var/lock/subsys/ecagent ]; then
        /bin/rm /var/lock/subsys/ecagent
    fi

    if [ "$SYSTEM" = "SunOS" ] ; then
        /usr/bin/ps -ef >> /var/log/ecagent.log
    fi
    killProcess $AGENT "agent"

    # If the agent was killed forcibly or crashed, the sandbox may still be
    # hanging around.  On Linux 2.6, the system shutdown scripts rely on
    # /proc/mounts to decide what filesystems need to be unmounted, but that
    # does not include all the sandbox mountpoints for some reason.  Also, the
    # shutdown scripts (on RHEL4 at least) don't bother to reverse sort the
    # list -- the net result being that not all mountpoints get cleaned up, and
    # the system gets wedged during shutdown.  To try to avoid this, we make
    # an attempt here to forcibly cleanup the agent sandbox.

    if [ "`/bin/uname`" = "Linux" ] ; then
        # First, shutdown any automounters inside the sandbox.

        /bin/mount \
            | $AWK_CMD '$5 != "autofs" || $3 !~/^\/efsroots/{next}
                            {print substr($1,14)}' \
            | /bin/sed -e 's/.$//' | /usr/bin/xargs /bin/kill > /dev/null 2>&1
        
        # Now, unmount all the filesystems that make up the sandbox.

        TMPFILE=/var/tmp/ecagent.tmp
        /bin/rm -f ${TMPFILE}

        if [ -r /proc/mounts ] ; then
            /bin/cat /proc/mounts | $AWK_CMD '{print $2}' >> ${TMPFILE}
        fi

        if [ -r /ecagent.state ] ; then
            /bin/cat /ecagent.state | $AWK_CMD '{print $3}' >> ${TMPFILE}
        fi

        if [ -r /etc/mtab ] ; then
            /bin/cat /etc/mtab | $AWK_CMD '{print $2}' >> ${TMPFILE}
        fi

        /bin/cat ${TMPFILE} \
            | /bin/grep /efsroots \
            | $SORT_CMD -r -u \
            | /usr/bin/xargs /bin/umount > /dev/null 2>&1

        /bin/rm -f ${TMPFILE}

    fi

    killProcess $DISKCACHE "diskcache"
    
    # Remove the local agent info files.

    /bin/rm -rf /var/run/ecagent
}

# Parse the command line argument.
RETVAL=0
case "$1" in
    'start')
        # Start the agent.

        startAgent
        ;;

    'status')
        # Print the list of PID's that are Electric Cloud agent processes;
        # also, the exit code will be ZERO if there is at least one agent
        # running; and ONE if there are no agents running.

        # For simplicity, we'll assume no agents are running.

        RETVAL=1
        agents=`/usr/bin/pgrep -f $AGENT -P 1`
        for pid in $agents
        do
          /bin/echo "Agent running with PID $pid"
          RETVAL=0
        done

        diskcache=`/usr/bin/pgrep -f $DISKCACHE -P 1`
        if [ "$diskcache" != "" ]; then
            /bin/echo "DiskCache Manager running with PID $diskcache"
        fi

        if [ "$RETVAL" -eq "1" ] ; then
            /bin/echo "No agent running"
        fi

        ;;

    'stop')
        # Stop the agent.

        stopAgent
        ;;

    'restart')
        # Stop, then start the agent.

        stopAgent
        startAgent
        ;;

    *)
        # Not a recognized option; just print a simple help message.

        /bin/echo "Usage: $0 { start | status | stop | restart }"
        ;;

esac

exit $RETVAL
