#!/bin/sh
# script for build docker images with electric-cloud accelerator applications
echo  $1 $2 
echo  $3 
printErrorMsg() {
    echo "ERROR: $1"
    echo ""
    echo "Usage: $0 <build_target> <build_version> <build_imagedir>"
    echo "1 <build_target>: agent | cm | emake ; #| full"
    echo "2 <build_version>: in format like 10.0.0.0"
    echo "3 <build_imagedir>: working build dir"
    exit 1
}

logMsg() {
    echo "<-log->| $1"    
}

if [ -z "$1" ]; then
    printErrorMsg "no target specified" 
fi

TARGET=$1

if [ -z "$2" ]; then
   BUILD_VERSION=10.0.0.0
else 
   BUILD_VERSION="$2"   
fi


PWD=`pwd`
TOP=".."

BUILD_SRCDIR=$TOP/dockerfiles/$TARGET
RULLES_DIR=$BUILD_SRCDIR/rulles
DOCKER_FILE=$BUILD_SRCDIR/Dockerfile

IMG_NAME="${TARGET}_${BUILD_VERSION}_alpha"
echo  "------------------------------------------------------"
logMsg "Check for config content:"
if ! [ -d $BUILD_SRCDIR ]; then
    printErrorMsg "Couldn't find - BUILD_SRCDIR : $BUILD_SRCDIR"    
fi

if ! [ -d $RULLES_DIR ]; then
    printErrorMsg "Couldn't find RULLES_DIR : $RULLES_DIR"    
fi

if ! [ -f $DOCKER_FILE ]; then
    printErrorMsg "Couldn't find : $DOCKER_FILE"    
fi

if ! [ -z "$3" ]; then
   BUILD_IMAGEDIR=$3
  echo  "test1"
else
   echo "tewst2"
   BUILD_IMAGEDIR=$TOP/$TARGET
fi

logMsg "BUILD_IMAGEDIR - $BUILD_IMAGEDIR"

if ! [ -d $BUILD_IMAGEDIR ]; then
    printErrorMsg "Couldn't find BUILD_IMAGEDIR : $BUILD_IMAGEDIR"    
fi

if [ -f "$BUILD_IMAGEDIR/Dockerfile" ]; then
   rm    $BUILD_IMAGEDIR/Dockerfile
fi

if [ -d $BUILD_IMAGEDIR/rulles ]; then
   rm -r $BUILD_IMAGEDIR/opt/ecloud/rulles
fi

#copy configs
#cd $BUILD_IMAGEDIR 
cp $DOCKER_FILE  $BUILD_IMAGEDIR/
cp -r $RULLES_DIR  $BUILD_IMAGEDIR/opt/ecloud/
cd $BUILD_IMAGEDIR
#exit 0
#build image
if ! (docker build -t=$IMG_NAME  --build-arg  agent_version=$BUILD_VERSION . )  then 
   printErrorMsg "Image was not created!!!"
fi
#docker save $IMG_NAME > $IMG_NAME.tar


#(set -x; docker build -t "$BUILD_IMAGE" .) 
#save image $IMG_NAME to tar

#docker save $IMG_NAME > $IMG_NAME.tar
#docker load IMG_NAME.tar

#cd "$PWD"
echo 
echo "Image built successfully: $IMG_NAME"
